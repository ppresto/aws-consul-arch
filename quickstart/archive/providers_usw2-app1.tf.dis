data "aws_eks_cluster" "usw2-app1" {
  provider = aws.usw2
  name = local.usw2.usw2-app1.eks.cluster_name
}
data "aws_eks_cluster_auth" "usw2-app1" {
  provider = aws.usw2
  name = local.usw2.usw2-app1.eks.cluster_name
}

provider "kubernetes" {

  host                   = data.aws_eks_cluster.usw2-app1.endpoint
  token                  = data.aws_eks_cluster_auth.usw2-app1.token
  cluster_ca_certificate = base64decode(data.aws_eks_cluster.usw2-app1.certificate_authority[0].data)
}

provider "helm" {

  kubernetes {
    host                   = data.aws_eks_cluster.usw2-app1.endpoint
    token                  = data.aws_eks_cluster_auth.usw2-app1.token
    cluster_ca_certificate = base64decode(data.aws_eks_cluster.usw2-app1.certificate_authority[0].data)
  }
}
provider "kubectl" {

  host                   = data.aws_eks_cluster.usw2-app1.endpoint
  cluster_ca_certificate = base64decode(data.aws_eks_cluster.usw2-app1.certificate_authority[0].data)
  token                  = data.aws_eks_cluster_auth.usw2-app1.token
  load_config_file       = false
}

# provider "kubernetes" {
#   host                   = module.eks-usw2.cluster_endpoint
#   cluster_ca_certificate = base64decode(module.eks-usw2.cluster_certificate_authority_data)

#   exec {
#     api_version = "client.authentication.k8s.io/v1beta1"
#     command     = "aws"
#     # This requires the awscli to be installed locally where Terraform is executed
#     args = ["eks", "get-token", "--cluster-name", module.eks-usw2.cluster_name]
#   }
# }